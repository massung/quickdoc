@Title      : QuickDoc Example
@Author     : Jeff Massung
@Date       : 2014.12.2
@Stylesheet : ./default.css
@Description: An example of everything QuickDoc can do in one place.

= QuickDoc Title

This is a sample QuickDoc markup test. The source for this can be found on [[https://raw.githubusercontent.com/massung/quickdoc/master/example.txt|GitHub]]. It is a dead-simple and easily parsed wiki-style markup for [[http://www.listpworks.com|LispWorks]].

In addition to markup, it also supports meta tag information to be embedded in any generated HTML and custom stylesheeting.

== Formatting Rules

QuickDoc is like most markdown formats. However, it subscribes to the notion that less is more and allows for much prettier output. It allows for ATX-style headings, paragraphs, blockquotes, links, images, bullet lists, monospace inlined code, and pre-formatted blocks. And many of these can be embedded recursively.

=== Headings

Headings are begun with the `=` characters (followed by a space) at the start of a line and up to three levels are permitted. Any trailing `=` after the header are optional and will be ignored.

: = h1 =
: == h2 ==
: === h3 ===

No more than three levels of headings are permitted for simplicity.

=== Paragraphs

Any line that isn't formatted with a pre-defined style at the start is considered to be a paragraph of formatted text. Empty newlines break paragraphs, but otherwise paragraphs are merged together. Within a paragraph, the following formatting rules apply:

* Use `**bold**` to begin and end **bold** text.
* Use `__italic__` to begin and end __italic__ text.
* Use `^^` to begin and end ^^superscript^^ text.
* Use `,,` to begin and end ,,subscript,, text.
* Use `[[links]]` to create [[links]].
* Use `\`pre-formatted text`\` to start and stop `pre-formatted text`.

Any character can be escaped (to prevent formatting) with the `\\` character.

Emphasis can **__be nested__**, but you can't nest bold or italics recursively within itself; it will terminate as opposed to beginning an inner span.

The following special unicode characters are also supported:

* `(tm)` for (tm)
* `(R)` for (R)
* `(C)` for (C)
* `(1/4)` for (1/4)
* `(1/2)` for (1/2)
* `(3/4)` for (3/4)
* `(o)` for (o)
* `(+/-)` for (+/-)

=== Lists

Lists can either be unordered or enumerated. Any line beginning with `*` followed by a space will create a list item for an unordered list. Any line beginning with `#` followed by a space will create an ordered list item. Any non-list item or empty line will terminate the list.

: * Item A
: * Item B

* Item A
* Item B

: # Item 1
: # Item 2

# Item 1
# Item 2

List items can be formatted, with all the rules for paragraphs, and they can be nested by simply adding more sub-items to the same list. Unordered and enumerated lists can also be embedded within each other.

: * Item A
: * * Item A.a
: * * Item A.b
: * Item B
: * # Item B.1
: * # * Item B.1.a
: * # * Item B.2.b
: * # Item B.2

* Item A
* * Item A.a
* * Item A.b
* Item B
* # Item B.1
* # * Item B.1.a
* # * Item B.2.b
* # Item B.2

=== Blockquotes

Any line beginning with `>` followed by a space will begin a blockquote. Like list items, blockquotes can make use of all the same formatting rules as paragraphs, and can recursively include themselves and lists.

: > Lorem ipsum...

> Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do
> eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut
> enim ad minim veniam, quis nostrud exercitation ullamco laboris
> nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor
> in reprehenderit in voluptate velit esse cillum dolore eu fugiat
> nulla pariatur. Excepteur sint occaecat cupidatat non proident,
> sunt in culpa qui officia deserunt mollit anim id est laborum.

=== Pre-formatted Text

If you want to display entire lines of pre-formatted text, begin the line with `:` followed by a space. As with all other groups, they will coalesce until reaching an empty line or non pre-formatted line.

: // Here is some sample pre-formatted text:
:
: void main() {
:     print("Hello, world!\n");
: }

: This section is separated from the one above by an empty line.

=== Images

Images are not ever embedded into paragraphs. They are always on a line of their own for simplicity and ease of reading. Any line that begins with a `!` followed by a space will be an image where the rest of the line is the address of the image to display.

You can insert a caption for the image by using a `|` after the URL for the image. Any text after the `|` will be used as the caption.

: ! http://imgs.xkcd.com/comics/lisp_cycles.png | A funny Lisp comic

! http://imgs.xkcd.com/comics/lisp_cycles.png | A funny Lisp comic

While there is no method of specifying the size of the image to display, the CSS for the HTML rendering is allowed to set the max-height of the image to something reasonable (240px is recommended).

=== Horizontal Rules

A horizontal rule can be placed anywhere by beginning a line with `---`.

---

Text can optionally follow the `---`, which the renderer may use to create a horizontal rule with text inside it.

: --- This is a rule with text in it. ---

--- This is a rule with text in it. ---

=== That's it!

That's all there is to it.

== Meta Tagging

Any line that begins with a `@` is ignored and considered a meta comment. When the HTML for the QuickDoc is being generated, `<META>` tags will be created for each of the comments.

: @Author: Me

The above will output a `<meta name="author" content="Me">` tag in the `<HEAD>` of the HTML. Everything before the `:` is considered the "key" and everything after is the content value.

__Note: if a meta comment line is malformed (e.g. missing a `:`) then it is treated as a paragraph line and will be formatted.__

A few meta comments are special and can actually affect the visual style of the HTML that is generated:

* `@title` will set the `<TITLE>` of the document.
* `@stylesheet` will add a `<LINK>` to a given stylesheet.

The meta comments are case-insensitive, so `@title`, `@TITLE`, and `@Title` will all work, and meta keys will always be written out as lowercase.

== Possible Future Features

Above all else, the goals of QuickDoc are to be...

# ...extremely terse, simple, and easy (and unambiguous) to parse.
# ...easy to generate clean HTML that is aesthetically pleasing.
# ...able to render outside of HTML (e.g. graphically).

Without compromising the above, these features are being considered (in no particular order):

* Word definitions (`<dl>`, `<dt>`, and `<dd>` tags).
* Table of contents generation.
* Underlining.
